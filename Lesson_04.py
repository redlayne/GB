import Loaderator as lolfrom sys import argvimport functoolsfrom random import randint, random, randrangefrom itertools import count, cyclefrom time import sleepfrom math import factorial# lol.loader1()# lol.loader2()# lol.loader3()# 4.1 -------------------rate, hours, bonus = map(int, argv [1:])salary =  rate*hours + bonusprint(f'In this month you get {salary} USD')input('Press Enter to continue...')print('-'*20, '\n')# 4.2 -------------------oldlist = [randint(-10, 100) for i in range(randint(10, 20))]newlist = [oldlist[i] for i in range(1, len(oldlist)) if oldlist[i] > oldlist[i-1]]print(f'Before: {oldlist}')print(f'After: {newlist}')input('Press Enter to continue...')print('-'*20, '\n')# 4.3 -------------------div20_21 = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]; print(div20_21)#можно было добавить print(i, end=' ') в сам генератор, но тогда в список ничего не записывалось#div20_21 = [print(i, end=' ') for i in range (20,241) if i % 20 == 0 or i % 21 ==0]input('Press Enter to continue...')print('-'*20, '\n')# 4.4 -------------------oldlist1 = [1, 2, 12, 324, -4, 1, 1, 0, 3333, 7, 1, 12] #с рандомом сложнее симулировать повторения если не делать маленький рэнжnewlist1 = [element for element in oldlist1 if oldlist1.count(element) == 1]print(f'Before: {oldlist1}')print(f'After: {newlist1}')input('Press Enter to continue...')print('-'*20, '\n')# 4.5 -------------------biglist = (i for i in range(100,1001) if i % 2 == 0)#print(f'looooong list \n{biglist}\n') #выводить такое - не гуманноbignumber = functools.reduce(lambda a, b: a*b, biglist)print(f'loooooooong number \n{bignumber}') #можно было поделить на фрагменты и выводить столбиком )))input('Press Enter to continue...')print('-'*20, '\n')# 4.6 -------------------tpercents = int(input('How tired im I in percents?'))for i in count(tpercents,10):    print(f'I am {i}% tired')    sleep(0.4)    if i >= 90:        print(f'I am 100% tired')        print ('Going to sleep now')        breakinput('Press Enter to continue...\n')randomlist = [randint(1,10) for i in range(randint(3,10))]print(f'\nSome random list: {randomlist}')counter = 1for el in cycle(randomlist):    print(el)    if counter == len(randomlist)*3:        break    counter += 1input('Press Enter to continue...')print('-'*20, '\n')# 4.7 -------------------factorialcount = randint(1,10)print(f'Let our number be {factorialcount}\n')def factorium (factorialcount):    facts = [factorial(i) for i in range(1, factorialcount+1)]    for el in facts:        yield elfacts = factorium(factorialcount)counter = 1for el in facts:    print(f'{counter}! = {el}')    counter += 1print('-'*20, '\n')# -------------------# А почему нельзя возвращать само генераторное выражение? Вроде работает.# def gena():#     listok = (i for i in range(5))#     return listok## g=(gena())# for el in g:#      print(el)